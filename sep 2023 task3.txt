1. How to compare two JSON have the same properties without order?
a. let obj1 = { name: "Person1", age:5 };
b. let obj2 = { age:5, name: "Person1" };

Answer:


let obj1 = { name: "Person1", age: 5 };
let obj2 = { age: 5, name: "Person1" };

// Get the keys of both objects and sort them
let keys1 = Object.keys(obj1).sort();
let keys2 = Object.keys(obj2).sort();

// Check if the sorted keys are equal
if (JSON.stringify(keys1) === JSON.stringify(keys2)) {
    // Sort the properties in both objects based on the sorted keys
    let sortedObj1 = {};
    let sortedObj2 = {};

    for (let key of keys1) {
        sortedObj1[key] = obj1[key];
        sortedObj2[key] = obj2[key];
    }

    // Compare the sorted objects
    if (JSON.stringify(sortedObj1) === JSON.stringify(sortedObj2)) {
        console.log("The JSON objects have the same properties (ignoring order).");
    } else {
        console.log("The JSON objects have different properties (ignoring order).");
    }
} else {
    console.log("The JSON objects have different properties (ignoring order).");
}




2. Use the rest countries API URL https://restcountries.com/v3.1/all and display all the country flags in the console.

Answer:

<!DOCTYPE html>
<html>
<head>
    <title>Country Flags Console Display</title>
</head>
<body>
    <script>
        // Create an XMLHttpRequest object
        var xhr = new XMLHttpRequest();

        // Define the API URL
        var apiUrl = 'https://restcountries.com/v3.1/all';

        // Configure the request
        xhr.open('GET', apiUrl, true);

        // Set up a callback function to handle the response
        xhr.onload = function() {
            if (xhr.status === 200) {
                // Parse the JSON response
                var countries = JSON.parse(xhr.responseText);

                // Loop through the countries and display their flags in the console
                countries.forEach(function(country) {
                    if (country.flags) {
                        console.log(`Country: ${country.name.common}, Flag: ${country.flags.png}`);
                    }
                });
            } else {
                console.error('Error fetching data from the API');
            }
        };

        // Send the request
        xhr.send();
    </script>
</body>
</html>




3. Use the same rest country api and print all countries names, regions, sub-regions, populations.

Answer:


// Create a new XMLHttpRequest object
var xhr = new XMLHttpRequest();

// Define the API endpoint URL
var url = "https://restcountries.com/v3.1/all";

// Configure the HTTP request
xhr.open("GET", url, true);

// Define a callback function to handle the response
xhr.onreadystatechange = function () {
  if (xhr.readyState === 4 && xhr.status === 200) {
    // Parse the JSON response
    var countries = JSON.parse(xhr.responseText);

    // Loop through the countries and print the desired information
    for (var i = 0; i < countries.length; i++) {
      var country = countries[i];
      var name = country.name.common;
      var region = country.region;
      var subRegion = country.subregion;
      var population = country.population;

      // Print the information
      console.log("Name: " + name);
      console.log("Region: " + region);
      console.log("Sub-region: " + subRegion);
      console.log("Population: " + population);
      console.log("\n");
    }
  }
};

// Send the HTTP request
xhr.send();





